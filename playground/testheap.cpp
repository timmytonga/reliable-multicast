//
// Created by Thien Nguyen on 10/8/20.
//

#include <queue>
#include <functional>
#include <iostream>

typedef struct {
    uint32_t        sequence_number;
    unsigned char   status;     // 0 means undeliverable while 1 means deliverable
    uint32_t        sender;    // sender's id
    uint32_t        msg_id;    // the id of message generated by sender
    uint32_t        data;      // a dummy integer
    uint32_t        proposer;      // process id of proposer
} QueuedMessage;

QueuedMessage makeQM(int seq, int proposer, int data){
    QueuedMessage t;
    t.sequence_number = seq;
    t.status = 2;
    t.sender = 1;
    t.msg_id = 2;
    t.data = data;
    t.proposer = proposer;
    return t;
}

auto cmp = [](QueuedMessage left, QueuedMessage right){
//        return left.sequence_number > right.sequence_number;
    return left.sequence_number == right.sequence_number ?
           left.proposer > right.proposer : left.sequence_number > right.sequence_number;
};

template<typename T> void print_queue(T& q) {
    while(!q.empty()) {
        std::cout << q[0].sequence_number << ":"<< q[0].proposer << " ";
        std::pop_heap(q.begin(), q.end(), cmp); q.pop_back();
    }
    std::cout << '\n';
}

int main(){
    std::vector<QueuedMessage> q;

    for (int i : {1,8,5,6,3,4,0,9,7,2}){
        q.push_back(makeQM(i, i, 3)); std::push_heap(q.begin(), q.end(), cmp);
    }
    q.push_back(makeQM(3, 4, 5));

    print_queue(q);
    return 0;
}